/*
 * WordsAPILib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

package com.rapidapi.p.wordsapiv1.models;

import com.fasterxml.jackson.annotation.JsonGetter;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonSetter;
import java.util.List;

/**
 * This is a model class for WordDetails type.
 */
public class WordDetails {
    private String definition;
    private String partOfSpeech;
    private List<String> synonyms;
    private List<String> typeOf;
    private List<String> hasTypes;
    private List<String> derivation;
    private List<String> examples;
    private List<String> antonyms;
    private List<String> verbGroup;
    private List<String> hasParts;
    private List<String> hasSubstances;
    private List<String> entails;

    /**
     * Default constructor.
     */
    public WordDetails() {
    }

    /**
     * Initialization constructor.
     * @param  definition  String value for definition.
     * @param  partOfSpeech  String value for partOfSpeech.
     * @param  synonyms  List of String value for synonyms.
     * @param  typeOf  List of String value for typeOf.
     * @param  hasTypes  List of String value for hasTypes.
     * @param  derivation  List of String value for derivation.
     * @param  examples  List of String value for examples.
     * @param  antonyms  List of String value for antonyms.
     * @param  verbGroup  List of String value for verbGroup.
     * @param  hasParts  List of String value for hasParts.
     * @param  hasSubstances  List of String value for hasSubstances.
     * @param  entails  List of String value for entails.
     */
    public WordDetails(
            String definition,
            String partOfSpeech,
            List<String> synonyms,
            List<String> typeOf,
            List<String> hasTypes,
            List<String> derivation,
            List<String> examples,
            List<String> antonyms,
            List<String> verbGroup,
            List<String> hasParts,
            List<String> hasSubstances,
            List<String> entails) {
        this.definition = definition;
        this.partOfSpeech = partOfSpeech;
        this.synonyms = synonyms;
        this.typeOf = typeOf;
        this.hasTypes = hasTypes;
        this.derivation = derivation;
        this.examples = examples;
        this.antonyms = antonyms;
        this.verbGroup = verbGroup;
        this.hasParts = hasParts;
        this.hasSubstances = hasSubstances;
        this.entails = entails;
    }

    /**
     * Getter for Definition.
     * Explains the definition of the word.
     * @return Returns the String
     */
    @JsonGetter("definition")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getDefinition() {
        return definition;
    }

    /**
     * Setter for Definition.
     * Explains the definition of the word.
     * @param definition Value for String
     */
    @JsonSetter("definition")
    public void setDefinition(String definition) {
        this.definition = definition;
    }

    /**
     * Getter for PartOfSpeech.
     * Explains what part of speech the word is.
     * @return Returns the String
     */
    @JsonGetter("partOfSpeech")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public String getPartOfSpeech() {
        return partOfSpeech;
    }

    /**
     * Setter for PartOfSpeech.
     * Explains what part of speech the word is.
     * @param partOfSpeech Value for String
     */
    @JsonSetter("partOfSpeech")
    public void setPartOfSpeech(String partOfSpeech) {
        this.partOfSpeech = partOfSpeech;
    }

    /**
     * Getter for Synonyms.
     * The list of synonyms.
     * @return Returns the List of String
     */
    @JsonGetter("synonyms")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getSynonyms() {
        return synonyms;
    }

    /**
     * Setter for Synonyms.
     * The list of synonyms.
     * @param synonyms Value for List of String
     */
    @JsonSetter("synonyms")
    public void setSynonyms(List<String> synonyms) {
        this.synonyms = synonyms;
    }

    /**
     * Getter for TypeOf.
     * List of words that are more general than the searched word.
     * @return Returns the List of String
     */
    @JsonGetter("typeOf")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getTypeOf() {
        return typeOf;
    }

    /**
     * Setter for TypeOf.
     * List of words that are more general than the searched word.
     * @param typeOf Value for List of String
     */
    @JsonSetter("typeOf")
    public void setTypeOf(List<String> typeOf) {
        this.typeOf = typeOf;
    }

    /**
     * Getter for HasTypes.
     * More specific examples of types of searched word.
     * @return Returns the List of String
     */
    @JsonGetter("hasTypes")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getHasTypes() {
        return hasTypes;
    }

    /**
     * Setter for HasTypes.
     * More specific examples of types of searched word.
     * @param hasTypes Value for List of String
     */
    @JsonSetter("hasTypes")
    public void setHasTypes(List<String> hasTypes) {
        this.hasTypes = hasTypes;
    }

    /**
     * Getter for Derivation.
     * The derivation if any.
     * @return Returns the List of String
     */
    @JsonGetter("derivation")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getDerivation() {
        return derivation;
    }

    /**
     * Setter for Derivation.
     * The derivation if any.
     * @param derivation Value for List of String
     */
    @JsonSetter("derivation")
    public void setDerivation(List<String> derivation) {
        this.derivation = derivation;
    }

    /**
     * Getter for Examples.
     * The usage examples of word if any.
     * @return Returns the List of String
     */
    @JsonGetter("examples")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getExamples() {
        return examples;
    }

    /**
     * Setter for Examples.
     * The usage examples of word if any.
     * @param examples Value for List of String
     */
    @JsonSetter("examples")
    public void setExamples(List<String> examples) {
        this.examples = examples;
    }

    /**
     * Getter for Antonyms.
     * List of antonyms for the searched word.
     * @return Returns the List of String
     */
    @JsonGetter("antonyms")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getAntonyms() {
        return antonyms;
    }

    /**
     * Setter for Antonyms.
     * List of antonyms for the searched word.
     * @param antonyms Value for List of String
     */
    @JsonSetter("antonyms")
    public void setAntonyms(List<String> antonyms) {
        this.antonyms = antonyms;
    }

    /**
     * Getter for VerbGroup.
     * The verb group of the searched word.
     * @return Returns the List of String
     */
    @JsonGetter("verbGroup")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getVerbGroup() {
        return verbGroup;
    }

    /**
     * Setter for VerbGroup.
     * The verb group of the searched word.
     * @param verbGroup Value for List of String
     */
    @JsonSetter("verbGroup")
    public void setVerbGroup(List<String> verbGroup) {
        this.verbGroup = verbGroup;
    }

    /**
     * Getter for HasParts.
     * Words that are parts of the searched word.
     * @return Returns the List of String
     */
    @JsonGetter("hasParts")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getHasParts() {
        return hasParts;
    }

    /**
     * Setter for HasParts.
     * Words that are parts of the searched word.
     * @param hasParts Value for List of String
     */
    @JsonSetter("hasParts")
    public void setHasParts(List<String> hasParts) {
        this.hasParts = hasParts;
    }

    /**
     * Getter for HasSubstances.
     * Words that are substances of the searched word.
     * @return Returns the List of String
     */
    @JsonGetter("hasSubstances")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getHasSubstances() {
        return hasSubstances;
    }

    /**
     * Setter for HasSubstances.
     * Words that are substances of the searched word.
     * @param hasSubstances Value for List of String
     */
    @JsonSetter("hasSubstances")
    public void setHasSubstances(List<String> hasSubstances) {
        this.hasSubstances = hasSubstances;
    }

    /**
     * Getter for Entails.
     * Words that are implied by the searched word. Usually used for verbs.
     * @return Returns the List of String
     */
    @JsonGetter("entails")
    @JsonInclude(JsonInclude.Include.NON_NULL)
    public List<String> getEntails() {
        return entails;
    }

    /**
     * Setter for Entails.
     * Words that are implied by the searched word. Usually used for verbs.
     * @param entails Value for List of String
     */
    @JsonSetter("entails")
    public void setEntails(List<String> entails) {
        this.entails = entails;
    }

    /**
     * Converts this WordDetails into string format.
     * @return String representation of this class
     */
    @Override
    public String toString() {
        return "WordDetails [" + "definition=" + definition + ", partOfSpeech=" + partOfSpeech
                + ", synonyms=" + synonyms + ", typeOf=" + typeOf + ", hasTypes=" + hasTypes
                + ", derivation=" + derivation + ", examples=" + examples + ", antonyms=" + antonyms
                + ", verbGroup=" + verbGroup + ", hasParts=" + hasParts + ", hasSubstances="
                + hasSubstances + ", entails=" + entails + "]";
    }

    /**
     * Builds a new {@link WordDetails.Builder} object.
     * Creates the instance with the state of the current model.
     * @return a new {@link WordDetails.Builder} object
     */
    public Builder toBuilder() {
        Builder builder = new Builder()
                .definition(getDefinition())
                .partOfSpeech(getPartOfSpeech())
                .synonyms(getSynonyms())
                .typeOf(getTypeOf())
                .hasTypes(getHasTypes())
                .derivation(getDerivation())
                .examples(getExamples())
                .antonyms(getAntonyms())
                .verbGroup(getVerbGroup())
                .hasParts(getHasParts())
                .hasSubstances(getHasSubstances())
                .entails(getEntails());
        return builder;
    }

    /**
     * Class to build instances of {@link WordDetails}.
     */
    public static class Builder {
        private String definition;
        private String partOfSpeech;
        private List<String> synonyms;
        private List<String> typeOf;
        private List<String> hasTypes;
        private List<String> derivation;
        private List<String> examples;
        private List<String> antonyms;
        private List<String> verbGroup;
        private List<String> hasParts;
        private List<String> hasSubstances;
        private List<String> entails;



        /**
         * Setter for definition.
         * @param  definition  String value for definition.
         * @return Builder
         */
        public Builder definition(String definition) {
            this.definition = definition;
            return this;
        }

        /**
         * Setter for partOfSpeech.
         * @param  partOfSpeech  String value for partOfSpeech.
         * @return Builder
         */
        public Builder partOfSpeech(String partOfSpeech) {
            this.partOfSpeech = partOfSpeech;
            return this;
        }

        /**
         * Setter for synonyms.
         * @param  synonyms  List of String value for synonyms.
         * @return Builder
         */
        public Builder synonyms(List<String> synonyms) {
            this.synonyms = synonyms;
            return this;
        }

        /**
         * Setter for typeOf.
         * @param  typeOf  List of String value for typeOf.
         * @return Builder
         */
        public Builder typeOf(List<String> typeOf) {
            this.typeOf = typeOf;
            return this;
        }

        /**
         * Setter for hasTypes.
         * @param  hasTypes  List of String value for hasTypes.
         * @return Builder
         */
        public Builder hasTypes(List<String> hasTypes) {
            this.hasTypes = hasTypes;
            return this;
        }

        /**
         * Setter for derivation.
         * @param  derivation  List of String value for derivation.
         * @return Builder
         */
        public Builder derivation(List<String> derivation) {
            this.derivation = derivation;
            return this;
        }

        /**
         * Setter for examples.
         * @param  examples  List of String value for examples.
         * @return Builder
         */
        public Builder examples(List<String> examples) {
            this.examples = examples;
            return this;
        }

        /**
         * Setter for antonyms.
         * @param  antonyms  List of String value for antonyms.
         * @return Builder
         */
        public Builder antonyms(List<String> antonyms) {
            this.antonyms = antonyms;
            return this;
        }

        /**
         * Setter for verbGroup.
         * @param  verbGroup  List of String value for verbGroup.
         * @return Builder
         */
        public Builder verbGroup(List<String> verbGroup) {
            this.verbGroup = verbGroup;
            return this;
        }

        /**
         * Setter for hasParts.
         * @param  hasParts  List of String value for hasParts.
         * @return Builder
         */
        public Builder hasParts(List<String> hasParts) {
            this.hasParts = hasParts;
            return this;
        }

        /**
         * Setter for hasSubstances.
         * @param  hasSubstances  List of String value for hasSubstances.
         * @return Builder
         */
        public Builder hasSubstances(List<String> hasSubstances) {
            this.hasSubstances = hasSubstances;
            return this;
        }

        /**
         * Setter for entails.
         * @param  entails  List of String value for entails.
         * @return Builder
         */
        public Builder entails(List<String> entails) {
            this.entails = entails;
            return this;
        }

        /**
         * Builds a new {@link WordDetails} object using the set fields.
         * @return {@link WordDetails}
         */
        public WordDetails build() {
            return new WordDetails(definition, partOfSpeech, synonyms, typeOf, hasTypes, derivation,
                    examples, antonyms, verbGroup, hasParts, hasSubstances, entails);
        }
    }
}
